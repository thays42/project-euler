from problem3 import prime_factors
from problem5 import product

def triangle_numbers():
    '''
    Infinite generator for triangular numbers.
    https://oeis.org/A000217
    '''
    n = 1
    while True:
        yield n * (n + 1) / 2

def n_divisors(number):
    '''
    Form of the sigma function for counting the number of divisors
    of a given number that relies on the prime factorization of the
    given number

    Source:
    https://en.wikipedia.org/wiki/Divisor_function#Formulas_at_prime_powers
    '''
    pf = prime_factors(number)
    return product((x + 1) for x in pf.values())


def main():
    '''
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
    first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
    1,2,4,7,14,28 We can see that 28 is the first triangle number to have over
    five divisors.

    What is the value of the first triangle number to have over five hundred
    divisors?
    '''
    for number in triangle_numbers():
        if n_divisors(number) >= 500:
            return number

if __name__ == '__main__':
    print(main())
